class Entity:
  def __init__(self):
    # Корневой абстрактный класс для всех существ и объектов
    # навигация по классу мап

class Grass(Entity):
  def __init__(self):
    # ресурс для травоядных
    # img = ...
    pass

class Rock(Entity):

  def __init__(self):
    # статичные объекты - нельзя взаимодействовать
    # img = ...
    pass

class Tree(Entity):
  def __init__(self):
    # статичные объекты - нельзя взаимодействовать
    # img = ...
    pass

class Creature(Entity):
  def __init__(self):
    # Существо, 
    # имеет скорость (сколько клеток может пройти за 1 ход), 
    speed = 5
    # hitpoints - "количество жизней" 
    HP = 3
    # img = ...

  # Имеет абстрактный метод makeMove() - сделать ход.
  # Наследники будут реализовывать этот метод каждый по-своему.
  def makeMove(self, coordinate):
    newCoordinate = findWay(coordinate)
    return newCoordinate
    
class Herbivore(Creature):
  def __init__(self):
    # Стремятся найти ресурс (траву) 
    # Если значение HP жертвы атаки хищника опускается до 0, травоядное исчезает
    # img = ...

  # может потратить свой ход на движение в сторону травы, либо на её поглощение.

class Predator(Creature):
  def __init__(self):
    # В дополнение к полям класса Creature, имеет силу атаки. 
    # Сила атаки - урон, который хищик наносит жертве при атаке
    # Например - HP травоядного = 10, сила атаки хищника = 5.
    # После атаки, у травоядного останется 10 - 5 = 5 жизней
    force = 4
    # img = ...

  # может потратить ход на:
  # Переместиться (чтобы приблизиться к жертве - травоядному)
  # Атаковать травоядное. При этом количество HP травоядного уменьшается на силу атаки хищника. 
    

class Map:
  # матрицa NxM, каждое существо или объект занимают клетку целиком, 
  # нахождение в клетке нескольких объектов/существ - недопустимо
  # содержит в себе коллекцию для хранения существ и их расположения
  def __init__(self):
    map = [] 
    # подумать какие ещё коллекции могут подойти

    # Размер поля ?

class Simulation:
  # Главный класс приложения, включает в себя:
  def __init__(self):
    # Карту
    self.map = {}
    # Счётчик ходов
    self.moveCounter = 0
    # Рендерер поля ???? - function of all creations
      # -> function of all creatures thas act (one method)
    # Actions - список действий, исполняемых перед стартом симуляции или на каждом ходу (детали ниже)
    self.actions = []

  # Методы:
    # nextTurn() - просимулировать и отрендерить один ход
    # startSimulation() - запустить бесконечный цикл симуляции и рендеринга
    # pauseSimulation() - приостановить бесконечный цикл симуляции и рендеринга
  
  # Механика размножения существ (св-во в класс?)
  # Механика голода, когда от отсутствия пищи у них начинает уменьшаться HP

class Actions:
  # Action - действие, совершаемое над миром. 
  # Например - сходить всеми существами. Это действие 
  # итерировало бы существ и вызывало каждому makeMove(). 
  # Каждое действие описывается отдельным классом и совершает операции над картой. 
  # Симуляция содержит 2 массива действий:
    # initActions - действия, совершаемые перед стартом симуляции. Пример - расставить объекты и существ на карте
    # turnActions - действия, совершаемые каждый ход. Примеры - передвижение существ, добавить травы или травоядных, если их осталось слишком мало


# алгоритм поиска пути

# Рендерер ответственен за визуализацию состояния поля, его отрисовку, может быть консольным, либо графическим)